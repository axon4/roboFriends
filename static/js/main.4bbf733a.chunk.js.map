{"version":3,"sources":["reducers.js","components/Header.js","components/CountButton.js","components/SearchBox.tsx","components/ErrorBoundary.js","components/Card.tsx","components/CardList.tsx","components/Scroll.tsx","components/MainPage.js","containers/App.tsx","actions.js","constants.js","serviceWorker.ts","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Header","nextProps","nextState","className","Component","CountButton","upDateCount","setState","state","count","this","id","colour","props","onClick","SearchBox","searchChange","type","placeholder","onChange","aria-label","ErrorBoundary","hasError","children","Card","ID","name","eMail","src","alt","CardList","map","user","i","key","Scroll","style","overflowY","border","height","MainPage","filterRobots","filter","robot","toLowerCase","includes","onRequestRobots","onSearchChange","App","connect","searchRobots","requestRobots","dispatch","event","payLoad","target","value","fetch","then","response","json","users","userName","username","email","catch","isLocalHost","Boolean","window","location","hostname","match","registerValidSW","SWURL","configuration","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpDate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uRAOMA,G,MAAqB,CAACC,YAAa,KAanCC,EAAqB,CAC1BC,WAAW,EACXC,OAAQ,GACRC,MAAO,I,4BCXOC,E,oLATQC,EAAWC,GAChC,OAAO,I,+BAIP,OAAO,wBAAIC,UAAU,MAAd,mB,GANYC,aCkCNC,E,kDAjCd,aAAe,IAAD,8BACb,gBAaDC,YAAc,WACb,EAAKC,UAAS,SAAAC,GACb,MAAO,CAACC,MAAOD,EAAMC,MAAQ,OAb9B,EAAKD,MAAQ,CAACC,MAAO,GAHR,E,kEAMQR,EAAWC,GAChC,OAAIQ,KAAKF,MAAMC,QAAUP,EAAUO,Q,+BAcnC,OACC,4BACCE,GAAG,UACHC,OAAQF,KAAKG,MAAMD,OACnBE,QAASJ,KAAKJ,aAHf,UAKSI,KAAKF,MAAMC,W,GA5BGL,aCkBXW,EAdG,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,aACpB,OACC,yBAAKb,UAAU,OACd,2BACCA,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,EACVI,aAAW,oBCQAC,E,kDAnBd,aAAe,IAAD,8BACb,gBAEKb,MAAQ,CAACc,UAAU,GAHX,E,gEAObZ,KAAKH,SAAS,CAACe,UAAU,M,+BAIzB,OAAIZ,KAAKF,MAAMc,SACP,qDAGDZ,KAAKG,MAAMU,a,GAhBQnB,aCkBboB,EAZ6B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxD,OACC,yBAAKxB,UAAU,uDACd,yBAAKyB,IAAG,+BAA0BH,EAA1B,iBAA6CI,IAAI,WACzD,6BACC,4BAAKH,GACL,2BAAIC,MCSOG,EAnBE,SAAC,GAA2C,IAAzChC,EAAwC,EAAxCA,OACnB,OACC,6BAEEA,EAAOiC,KAAI,SAACC,EAAMC,GACjB,OACC,kBAAC,EAAD,CACCC,IAAKpC,EAAOmC,GAAGR,GACfA,GAAI3B,EAAOmC,GAAGR,GACdC,KAAM5B,EAAOmC,GAAGP,KAChBC,MAAO7B,EAAOmC,GAAGN,aCATQ,EARA,SAACtB,GACf,OACC,yBAAKuB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnE1B,EAAMU,WC+BKiB,G,kNAzBdC,aAAe,WACd,OAAO,EAAK5B,MAAMf,OAAO4C,QAAO,SAAAC,GAC/B,OAAOA,EAAMjB,KAAKkB,cAAcC,SAAS,EAAKhC,MAAMlB,YAAYiD,mB,kEALjElC,KAAKG,MAAMiC,oB,+BASF,IAAD,EACsCpC,KAAKG,MAA3ChB,EADA,EACAA,UAAmBkD,GADnB,EACWjD,OADX,EACmBiD,gBAE3B,OAAOlD,EACN,wBAAIM,UAAU,MAAd,cACA,yBAAKA,UAAU,MACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWa,aAAc+B,IACzB,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUjD,OAAQY,KAAK+B,wB,GAtBNrC,cCyBjB4C,G,6KAEJ,OAAO,kBAAC,EAAatC,KAAKG,W,GAFVT,cAMH6C,eAtBS,SAAAzC,GACvB,MAAO,CACNb,YAAaa,EAAM0C,aAAavD,YAChCG,OAAQU,EAAM2C,cAAcrD,OAC5BD,UAAWW,EAAM2C,cAActD,UAC/BE,MAAOS,EAAM2C,cAAcpD,UAIF,SAAAqD,GAC1B,MAAO,CACNL,eAAgB,SAAAM,GAAK,OAAID,ECvBY,CACtCnC,KCRkC,sBDSlCqC,QDqBkDD,EAAME,OAAOC,SAC9DV,gBAAiB,kBAAMM,GCnBU,SAAAA,GAClCA,EAAS,CAACnC,KCX2B,2BDarCwC,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACL,IAAMP,EAAUO,EAAM9B,KAAI,SAAAC,GAAI,MAAK,CAClCP,GAAIO,EAAKrB,GACTe,KAAMM,EAAKN,KACXoC,SAAU9B,EAAK+B,SACfpC,MAAOK,EAAKgC,UAGbZ,EAAS,CAACnC,KCtByB,yBDsBKqC,QAASA,OAEjDW,OAAM,SAAAlE,GAAK,OAAIqD,EAAS,CAACnC,KCvBS,wBDuBoBqC,QAASvD,cDcnDkD,CAA6CD,GGvCtDkB,EAAcC,QACU,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2DAoCF,SAASC,EAAgBC,EAAeC,GACvCC,UAAUC,cACRC,SAASJ,GACTf,MAAK,SAAAoB,GACLA,EAAaC,cAAgB,WAC5B,IAAMC,EAAmBF,EAAaG,WAEd,MAApBD,IAEJA,EAAiBE,cAAgB,WACD,cAA3BF,EAAiBxE,QAChBmE,UAAUC,cAAcO,YAE3BC,QAAQC,IAAI,iHAGRX,GAAiBA,EAAcY,UAClCZ,EAAcY,SAASR,KAIxBM,QAAQC,IAAI,qCAGRX,GAAiBA,EAAca,WAClCb,EAAca,UAAUT,WAO7Bb,OAAM,SAAAlE,GACNqF,QAAQrF,MAAM,6CAA8CA,M,UCjEzDyF,EAASC,yBACTC,EAAcC,YAAgB,CAAEzC,abJV,WAA8C,IAA7C1C,EAA4C,uDAApCd,EAAoBkG,EAAgB,uDAAP,GACjE,OAAQA,EAAO3E,MACd,IWXiC,sBXahC,OAAO4E,OAAOC,OAAO,GAAItF,EAAO,CAACb,YAAaiG,EAAOtC,UAEtD,QACC,OAAO9C,IaH0C2C,cbavB,WAA8C,IAA7C3C,EAA4C,uDAApCZ,EAAoBgG,EAAgB,uDAAP,GAClE,OAAQA,EAAO3E,MACd,IW1BoC,yBX2BnC,OAAO4E,OAAOC,OAAO,GAAItF,EAAO,CAACX,WAAW,IAE7C,IW5BoC,yBX6BnC,OAAOgG,OAAOC,OAAO,GAAItF,EAAO,CAACX,WAAW,EAAOC,OAAQ8F,EAAOtC,UAEnE,IW9BmC,wBX+BlC,OAAOuC,OAAOC,OAAO,GAAItF,EAAO,CAACX,WAAW,EAAOE,MAAO6F,EAAOtC,UAElE,QACC,OAAO9C,MaxBJuF,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAExEW,IAASC,OACR,kBAAC,IAAD,CAAUL,MAAOA,GAChB,kBAAC,EAAD,OAEAM,SAASC,eAAe,SDHnB,SAAkB5B,GACxB,GAA6C,kBAAmBC,UAAW,CAK1E,GAHkB,IAAI4B,IAAIC,eAAwBpC,OAAOC,SAASoC,MAGpDC,SAAWtC,OAAOC,SAASqC,OAAQ,OAEjDtC,OAAOuC,iBAAiB,QAAQ,WAC/B,IAAMlC,EAAK,UAAM+B,eAAN,sBAEPtC,IAqDP,SAAiCO,EAAeC,GAE/CjB,MAAMgB,EAAO,CACZmC,QAAS,CAAC,iBAAkB,YAE3BlD,MAAK,SAAAC,GAEL,IAAMkD,EAAclD,EAASiD,QAAQE,IAAI,gBAEjB,MAApBnD,EAASoD,QAAkC,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAE1ErC,UAAUC,cAAcqC,MAAMvD,MAAK,SAAAoB,GAClCA,EAAaoC,aAAaxD,MAAK,WAC9BU,OAAOC,SAAS8C,eAKlB3C,EAAgBC,EAAOC,MAGxBT,OAAM,WACNmB,QAAQC,IAAI,2EAzEX+B,CAAwB3C,EAAOC,GAG/BC,UAAUC,cAAcqC,MAAMvD,MAAK,WAClC0B,QAAQC,IAAI,0HAIbb,EAAgBC,EAAOC,OChB3BE,K","file":"static/js/main.4bbf733a.chunk.js","sourcesContent":["import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {searchField: ''};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\t// return { ...state, {searchField: action.payLoad} };\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payLoad});\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t};\r\n};\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n\tswitch (action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending: true});\r\n\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {isPending: false, robots: action.payLoad});\r\n\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {isPending: false, error: action.payLoad});\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t};\r\n};","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\treturn false;\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn <h1 className='f1'>RoboFriends</h1>\r\n\t};\r\n};\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass CountButton extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.state = {count: 0};\r\n\t};\r\n\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\tif (this.state.count !== nextState.count) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t};\r\n\t};\r\n\r\n\tupDateCount = () => {\r\n\t\tthis.setState(state => {\r\n\t\t\treturn {count: state.count + 1};\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<button\r\n\t\t\t\tid='counter'\r\n\t\t\t\tcolour={this.props.colour}\r\n\t\t\t\tonClick={this.upDateCount}\r\n\t\t\t>\r\n\t\t\t\tCount: {this.state.count}\r\n\t\t\t</button>\r\n\t\t);\r\n\t};\r\n};\r\n\r\nexport default CountButton;","import React from 'react';\r\n\r\ninterface ISearchBoxProps {\r\n\tsearchChange(event: React.SyntheticEvent<HTMLInputElement>): void;\r\n};\r\n\r\nconst SearchBox = ({ searchChange }: ISearchBoxProps) => {\r\n\treturn (\r\n\t\t<div className='pa3'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='Search Robots'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t\taria-label='Search Robots'\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.state = {hasError: false};\r\n\t};\r\n\r\n\tcomponentDidCatch() {\r\n\t\tthis.setState({hasError: true});\r\n\t};\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Error: CanNot Compute</h1>\r\n\t\t};\r\n\t\t\r\n\t\treturn this.props.children;\r\n\t};\r\n};\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\ninterface CardStateLessProps {\r\n\tID: string;\r\n\tname: string;\r\n\teMail: string;\r\n};\r\n\r\nconst Card: React.SFC<CardStateLessProps> = ({ ID, name, eMail }) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img src={`https://robohash.org/${ID}?size=200x200`} alt='Robots' />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{eMail}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport { IRobot } from '../containers/App';\r\n\r\nconst CardList = ({ robots }: { robots: Array<IRobot> }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tkey={robots[i].ID}\r\n\t\t\t\t\t\t\tID={robots[i].ID}\r\n\t\t\t\t\t\t\tname={robots[i].name}\r\n\t\t\t\t\t\t\teMail={robots[i].eMail}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\ntype IScrollProps = {\r\n\tchildren?: JSX.Element;\r\n};\r\n\r\nconst Scroll = (props: IScrollProps) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport CountButton from './CountButton';\r\nimport SearchBox from './SearchBox';\r\nimport ErrorBoundary from './ErrorBoundary';\r\nimport CardList from './CardList';\r\nimport Scroll from './Scroll';\r\n// import { robots } from './robots';\r\nimport './MainPage.css';\r\n\r\nclass MainPage extends Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t};\r\n\r\n\tfilterRobots = () => {\r\n\t\treturn this.props.robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { isPending, robots, onSearchChange } = this.props;\r\n\r\n\t\treturn isPending ?\r\n\t\t\t<h1 className='tc'>Loading...</h1> : (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<Header />\r\n\t\t\t\t<CountButton />\r\n\t\t\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList robots={this.filterRobots()} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n};\r\n\r\nexport default MainPage;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MainPage from '../components/MainPage';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport './App.css';\r\n\r\nexport interface IRobot {\r\n\tID: string;\r\n\tname: string;\r\n\teMail: string;\r\n};\r\n\r\ninterface IAppProps {};\r\n\r\ninterface IAppState {\r\n\trobots: Array<IRobot>;\r\n\tsearchField: string;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tonSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t};\r\n};\r\n\r\nclass App extends Component<IAppProps, IAppState> {\r\n\trender() {\r\n\t\treturn <MainPage {...this.props} />\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayLoad: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => {\r\n\t\t\tconst payLoad = users.map(user => ({\r\n\t\t\t\tID: user.id,\r\n\t\t\t\tname: user.name,\r\n\t\t\t\tuserName: user.username,\r\n\t\t\t\teMail: user.email\r\n\t\t\t}));\r\n\r\n\t\t\tdispatch({type: REQUEST_ROBOTS_SUCCESS, payLoad: payLoad});\r\n\t\t})\r\n\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payLoad: error}));\r\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// this optional code is used to register a service-worker; 'register()' is not called by deFault. This lets the application load faster on subsequent visits in production, and gives it offLine capabilities. HowEver, it also means that developers (and users) will only see deployed upDates on subsequent visits to a page, after all the existing tabs open on the page have been closed, since previously-cached--reSources are upDated in the backGround. To learn more about the benefits of this model and instructions on how to opt-in, read: https://bit.ly/CRA-PWA\r\n\r\nconst isLocalHost = Boolean(\r\n\twindow.location.hostname === 'localhost' ||\r\n\t// [::1] is the IPv6--localHost-address\r\n\twindow.location.hostname === '[::1]' ||\r\n\t// 127.0.0.0/8 are considered localHost for IPv4\r\n\twindow.location.hostname.match(\r\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n\t)\r\n);\r\n\r\ntype Configuration = {\r\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n\tonUpDate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(configuration?: Configuration) {\r\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n\t\t// URL-constructor is availAble in all browsers that support SW\r\n\t\tconst publicURL = new URL(process.env.PUBLIC_URL, window.location.href);\r\n\r\n\t\t// service-worker won't work if 'PUBLIC_URL' is on a different origin from what our page is served on. This might happen if a CDN is used to serve assets; see: https://github.com/facebook/create-react-app/issues/2374\r\n\t\tif (publicURL.origin !== window.location.origin) return;\r\n\r\n\t\twindow.addEventListener('load', () => {\r\n\t\t\tconst SWURL = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalHost) {\r\n\t\t\t\t// this is running on localHost; let's check if a service-worker still exists or not\r\n\t\t\t\tcheckValidServiceWorker(SWURL, configuration);\r\n\r\n\t\t\t\t// add some additional logging to localHost, pointing developers to the service-worker/PWA-documentation\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log('this web-application is being served cache-first by a service-worker. To learn more, visit: https://bit.ly/CRA-PWA');\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// is not localHost; just register service-worker\r\n\t\t\t\tregisterValidSW(SWURL, configuration);\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n};\r\n\r\nfunction registerValidSW(SWURL: string, configuration?: Configuration) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(SWURL)\r\n\t\t.then(registration => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing;\r\n\r\n\t\t\t\tif (installingWorker == null) return;\r\n\r\n\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\tif (installingWorker.state === 'installed') {\r\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t// at this point, the upDated, pre-cached conTent has been fetched, but the previous service-worker will still serve the older conTent until all client-tabs are closed\r\n\t\t\t\t\t\t\tconsole.log('new conTent is availAble and will be used when all tabs for this page are closed. See: https://bit.ly/CRA-PWA');\r\n\r\n\t\t\t\t\t\t\t// execute callBack\r\n\t\t\t\t\t\t\tif (configuration && configuration.onUpDate) {\r\n\t\t\t\t\t\t\t\tconfiguration.onUpDate(registration);\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// at this point, everyThing has been pre-cached. It's the perfect time to disPlay a 'conTent is cached for offLine use'-message\r\n\t\t\t\t\t\t\tconsole.log('conTent is cached for offLine use');\r\n\r\n\t\t\t\t\t\t\t// execute callBack\r\n\t\t\t\t\t\t\tif (configuration && configuration.onSuccess) {\r\n\t\t\t\t\t\t\t\tconfiguration.onSuccess(registration);\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tconsole.error('error during service-worker--registration:', error);\r\n\t\t});\r\n};\r\n\r\nfunction checkValidServiceWorker(SWURL: string, configuration?: Configuration) {\r\n\t// check if the service-worker can be found. If it can't, reLoad the page\r\n\tfetch(SWURL, {\r\n\t\theaders: {'Service-Worker': 'script'}\r\n\t})\r\n\t\t.then(response => {\r\n\t\t\t// enSure service-worker exists and that we really are getting a JS file\r\n\t\t\tconst contentType = response.headers.get('Content-Type');\r\n\r\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n\t\t\t\t// no service-worker found; probably a different application - reLoad the page\r\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// service-worker found - proceed as normal\r\n\t\t\t\tregisterValidSW(SWURL, configuration);\r\n\t\t\t};\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log('no interNet-connection found; application is running in offLine mode');\r\n\t\t});\r\n};\r\n\r\nexport function unRegister() {\r\n\tif ('serviceWorker' in navigator) {\r\n\t\tnavigator.serviceWorker.ready\r\n\t\t\t.then(registration => {\r\n\t\t\t\tregistration.unregister();\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tconsole.error(error.message);\r\n\t\t\t});\r\n\t};\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { Provider } from 'react-redux';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers'\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>\n, document.getElementById('root'));\n\nserviceWorker.register();"],"sourceRoot":""}